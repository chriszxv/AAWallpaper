# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

################################################################################ Helpers ################################################################################
desc "Gets target name from code"
desc "#### Example:"
desc "```\nbundle exec fastlane get_target_name code:build/default/uat\n```"
desc "```\nbundle exec fastlane get_target_name code:build/default/uat\n```"
desc "```\nbundle exec fastlane get_target_name code:build/default/uat/build_for_uat\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "---"
lane :get_target_name do |options|
	puts "-options: #{options}"
	code = options[:code]

	# build/default/uat -> uat
	# build/default/uat/build_for_uat -> uat
	strings = code.split('/')
	if strings.count > 1
	target_name = strings[1]
	else
		UI.user_error!("target_name not found in code: #{code}")
	end
	puts "-target_name: #{target_name}"
	target_name
end

desc "Gets env name from code"
desc "#### Example:"
desc "```\nbundle exec fastlane get_env_name code:build/default/uat\n```"
desc "```\nbundle exec fastlane get_env_name code:build/default/uat/build_for_uat\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "---"
lane :get_env_name do |options|
	puts "-options: #{options}"
	code = options[:code]

	# build/default/uat -> uat
	# build/default/uat/build_for_uat -> uat
	strings = code.split('/')
	if strings.count > 2
	env_name = strings[2]
	else
		UI.user_error!("env name not found in code: #{code}")
	end
	puts "-env_name: #{env_name}"
	env_name
end

desc "Gets config info from info.json"
desc "#### Example:"
desc "```\nbundle exec fastlane get_config_info code:build/default/uat\n```"
desc "```\nbundle exec fastlane get_config_info code:build/default/uat/build_for_uat\n```"
desc "```\nbundle exec fastlane get_config_info code:build/ABCI\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "---"
lane :get_config_info do |options|
	puts "-options: #{options}"
	code = options[:code]

	target_name = get_target_name(code: code)
	puts "-target_name: #{target_name}"

	config_info_path = "configs/#{target_name}/info.json"
	puts "-config_info_path: #{config_info_path}"

	config_info_file = File.read(config_info_path)
	config_info = JSON.parse(config_info_file)

	puts "get_config_info:"
	puts "-config_info: #{config_info}"
	config_info
end

desc "Gets build info from info.json"
desc "#### Example:"
desc "```\nbundle exec fastlane get_build_info code:build/default/uat\n```"
desc "```\nbundle exec fastlane get_build_info code:build/default/uat/build_for_uat\n```"
desc "```\nbundle exec fastlane get_build_info code:build/ABCI\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "---"
lane :get_build_info do |options|
	puts "-options: #{options}"
	code = options[:code]

	target_name = get_target_name(code: code)
	puts "-target_name: #{target_name}"

	env_name = get_env_name(code: code)
	puts "-env_name: #{env_name}"

	build_info_path = "builds/#{target_name}/info.json"
	puts "-build_info_path: #{build_info_path}"

	build_info_file = File.read(build_info_path)
	build_info = JSON.parse(build_info_file)
	build_info = build_info[env_name]
	puts "get_build_info:"
	puts "-build_info: #{build_info}"
	build_info
end

desc "Generate an export method"
desc "#### Example:"
desc "```\nbundle exec fastlane generate_export_method export_method:adhoc\n```"
desc "#### Options"
desc "* **`export_method`**: Export method: `development` / `adhoc` / `appstore` build configuration in Xcode."
desc "---"
lane :generate_export_method do |options|
	puts "-options: #{options}"
	export_method = options[:export_method]

	if export_method == "adhoc"
		export_method = "ad-hoc"
	elsif export_method == "appstore"
		export_method = "app-store"
	elsif export_method == "development"
		export_method = "development"
	else 
		raise "Invalid export method."
	end

	puts "generate_export_method:"
	puts "-export_method: #{export_method}"
	export_method
end

desc "Bumps a build number **`NOT IN USED, since it does not support multiple targets`**"
desc "#### Example:"
desc "```\nbundle exec fastlane bump_build_number code:build/default/uat\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "---"
lane :bump_build_number do |options|
	UI.user_error!("This lane is not in used.")

	puts "-options: #{options}"
	code = options[:code]
	config = get_config_info(code: code)

	xcodeproj = config["build"]["xcodeproj"]

	puts "-xcodeproj: #{xcodeproj}"

	build_number = increment_build_number(xcodeproj: xcodeproj)

	puts "bump_build_number:"
	puts "-build_number: #{build_number}"
	build_number
end

desc "Generate a build name"
desc "#### Example:"
desc "```\nbundle exec fastlane generate_build_name code:build/default/uat export_method:adhoc\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`export_method`**: Export method: `development` / `adhoc` / `appstore` build configuration in Xcode."
desc "* **`ipa_suffix`**: last name component."
desc "---"
lane :generate_build_name do |options|
	puts "-options: #{options}"
	code = options[:code]
	export_method = options[:export_method]
	config = get_config_info(code: code)
	build_info = get_build_info(code: code)

	xcodeproj = config["build"]["xcodeproj"]
	scheme = build_info["scheme"]
	ipa_suffix = build_info["ipa_suffix"]
	puts "-xcodeproj: #{xcodeproj}"
	puts "-scheme: #{scheme}"

	version = get_version_number(
		xcodeproj: xcodeproj,
		target: scheme
	)

	build_name = "#{scheme}.v#{version}.#{export_method}.#{ipa_suffix}.ipa"

	puts "generate_build_name:"
	puts "-build_name: #{build_name}"
	build_name
end

################################################################################ Builds ################################################################################
desc "Builds an IPA"
desc "#### Example:"
desc "```\nbundle exec fastlane build_ipa code:build/default/uat export_method:adhoc\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`export_method`**: Export method: `development` / `adhoc` / `appstore` build configuration in Xcode."
desc "---"
lane :build_ipa do |options|
	puts "-options: #{options}"
	code = options[:code]
	export_method = options[:export_method]
	config = get_config_info(code: code)
	build_info = get_build_info(code: code)
	target_name = get_target_name(code: code)

	workspace = config["build"]["workspace"]
	scheme = build_info["scheme"]
	configuration = build_info["configuration"]
	export_options = "fastlane/configs/#{target_name}/#{export_method}.plist"
	puts "build_ipa:"
	puts "-config: #{config}"
	puts "-workspace: #{workspace}"
	puts "-scheme: #{scheme}"
	puts "-configuration: #{configuration}"
	puts "-export_method: #{export_method}"
	puts "-export_options: #{export_options}"

	build_name = generate_build_name(
		code: code,
		export_method: export_method
	)

	cocoapods(podfile: "Podfile")

	gym(
		configuration: configuration,
		workspace: workspace,
		scheme: scheme,
		clean: true,
		export_method: generate_export_method(export_method: export_method),
		export_options: export_options,
		xcargs: "-allowProvisioningUpdates",
		export_xcargs: "-allowProvisioningUpdates",
		output_directory: "./builds",
		output_name: build_name
	)
end

################################################################################ Uploads ################################################################################
desc "Uploads an IPA to App Center"
desc "#### Example:"
desc "```\nbundle exec fastlane upload_appcenter code:build/default/uat export_method:adhoc\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`export_method`**: Export method: `development` / `adhoc` / `appstore` build configuration in Xcode."
desc "---"
lane :upload_appcenter do |options|
	puts "-options: #{options}"
	code = options[:code]
	export_method = options[:export_method]
	config = get_config_info(code: code)

	api_token = config["appcenter_upload"]["api_token"]
	app_name = config["appcenter_upload"]["app_name"]
	owner_name = config["appcenter_upload"]["owner_name"]
	owner_type = config["appcenter_upload"]["owner_type"]

	puts "upload_appcenter:"
	puts "-config: #{config}"
	puts "-api_token: #{api_token}"
	puts "-app_name: #{app_name}"
	puts "-owner_name: #{owner_name}"
	puts "-owner_type: #{owner_type}"

	build_name = generate_build_name(
		code: code,
		export_method: export_method
	)

	appcenter_upload(
		api_token: api_token,
		app_name: app_name,
		owner_name: owner_name,
		owner_type: owner_type,
		ipa: "builds/#{build_name}"
	)
end

desc "Uploads an IPA to File Manager"
desc "Simulate a curl call to file manager server:"
desc "`curl -F file0=@../builds/CODE.v1.1.0.b45.PRO.ipa https://10.3.2.1/diva/filemanager/upload.php`"
desc "#### Example:"
desc "```\nbundle exec fastlane upload_filemanager code:build/default/uat export_method:adhoc\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`export_method`**: Export method: `development` / `adhoc` / `appstore` build configuration in Xcode."
desc "---"
lane :upload_filemanager do |options|
	puts "-options: #{options}"
	code = options[:code]
	export_method = options[:export_method]
	config = get_config_info(code: code)

	url = config["filemanager"]["url"]

	puts "upload_filemanager:"
	puts "-url: #{url}"

	build_name = generate_build_name(
		code: code, 
		export_method: export_method
	)

	# sh = sh("pwd") // debug
	sh("curl -F file0=@../builds/#{build_name} #{url}")
end


desc "Uploads an IPA to App Store"
desc "#### Example:"
desc "```\nbundle exec fastlane upload_appstore code:build/default/uat export_method:appstore\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`export_method`**: Export method: `development` / `adhoc` / `appstore` build configuration in Xcode."
desc "---"
lane :upload_appstore do |options|
	puts "-options: #{options}"
	code = options[:code]
	export_method = options[:export_method]
	config = get_config_info(code: code)

	puts "upload_appstore:"

	build_name = generate_build_name(
		code: code, 
		export_method: export_method
	)

	deliver(
		force: true, # Skip HTMl report verification
		skip_metadata: true,
		skip_screenshots: true,
		ipa: "builds/#{build_name}"
	)
end

################################################################################ Gits ################################################################################
desc "Fetch remote and checkout out target branch **`NOT IN USED, since Gitlab supported`**"
desc "#### Example:"
desc "```\nbundle exec fastlane git_checkout branch:develop\n```"
desc "#### Options"
desc "* **`branch`**: Target branch to pull."
desc "---"
lane :git_checkout do |options|
	UI.user_error!("This lane is not in used.")

	puts "-options: #{options}"
	branch = options[:branch]

	sh("git reset --hard HEAD")
	sh("git remote update origin")
	sh("git fetch origin")
	sh("git checkout --force origin/#{branch}")
	sh("git pull origin #{branch}")
	sh("git reset --hard #{branch}")
end

desc "Commit bump build number message push to remote **`NOT IN USED, since it change create too many commits`**"
desc "#### Example:"
desc "```\nbundle exec fastlane git_commit_build code:build/default/uat export_method:adhoc branch:develop\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`branch`**: Target branch to push."
desc "---"
lane :git_commit_build do |options|
	UI.user_error!("This lane is not in used.")

	puts "-options: #{options}"
	code = options[:code]
	export_method = options[:export_method]
	branch = options[:branch]
	message = options[:message]
	config = get_config_info(code: code)

	xcodeproj = config["build"]["xcodeproj"]
	
	build_name = generate_build_name(
		code: code, 
		export_method: export_method
	)

	commit_version_bump(
		message: "[fastlane] - #{message} (#{build_name})",
		xcodeproj: xcodeproj,
		force: true
	)
	
	sh("git push origin HEAD:#{branch} --force")
end

################################################################################ Jobs ################################################################################
desc "Builds an Ad Hoc IPA and upload to App Center"
desc "#### Example:"
desc "```\nbundle exec fastlane beta_appcenter code:build/default/uat branch:develop\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`branch`**: Target branch to pull and push."
desc "---"
lane :beta_appcenter do |options|	
	puts "-options: #{options}"
	code = options[:code]
	branch = options[:branch]
	config = get_config_info(code: code)

	# git_checkout(branch: branch)
	
	# bump_build_number(code: code)

	build_ipa(
		code: code, 
		export_method: "adhoc"
	)

	upload_appcenter(
		code: code, 
		export_method: "adhoc"
	)

	# git_commit_build(code: code, branch: branch, message: "beta_appcenter")

end

desc "Builds an Ad Hoc IPA and upload to File Manager"
desc "#### Example:"
desc "```\nbundle exec fastlane beta_filemanager code:build/default/uat branch:develop\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`branch`**: Target branch to pull and push."
desc "---"
lane :beta_filemanager do |options|
	puts "-options: #{options}"
	code = options[:code]
	branch = options[:branch]
	config = get_config_info(code: code)

	# git_checkout(branch: branch)
	
	# bump_build_number(code: code)

	build_ipa(
		code: code, 
		export_method: "adhoc"
	)

	upload_filemanager(
		code: code, 
		export_method: "adhoc"
	)

	# git_commit_build(code: code, branch: branch, message: "beta_filemanager")
end

desc "Builds an App Store IPA and upload to File Manager"
desc "#### Example:"
desc "```\nbundle exec fastlane release_filemanager code:build/default/uat branch:develop\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`branch`**: Target branch to pull and push."
desc "---"
lane :release_filemanager do |options|
	puts "-options: #{options}"
	code = options[:code]
	branch = options[:branch]
	config = get_config_info(code: code)

	# git_checkout(branch: branch)

	build_ipa(
		code: code, 
		export_method: "appstore"
	)

	upload_filemanager(
		code: code, 
		export_method: "appstore"
	)

	# git_commit_build(code: code, branch: branch, message: "release_filemanager")
end

desc "Builds an App Store IPA and upload to App Store"
desc "#### Example:"
desc "```\nbundle exec fastlane release_appstore code:build/default/uat branch:develop\n```"
desc "#### Options"
desc "* **`code`**: Project code for any lane options in info.json inside configs / builds. In gitlab, we use branch name for this parameter."
desc "* **`branch`**: Target branch to pull and push."
desc "---"
lane :release_appstore do |options|
	puts "-options: #{options}"
	code = options[:code]
	branch = options[:branch]
	config = get_config_info(code: code)

	# git_checkout(branch: branch)

	build_ipa(
		code: code, 
		export_method: "appstore"
	)

	upload_appstore(
		code: code, 
		export_method: "appstore"
	)

	# git_commit_build(code: code, branch: branch, message: "release_appstore")
end

################################################################################ Tests ################################################################################
desc "Testing area"
desc "#### Example:"
desc "```\nbundle exec fastlane test <option>:<value> \n```"
desc "#### Options"
desc "* Any options"
desc "---"
lane :test do |options|
	puts "-options: #{options}"
	# Testing
end
